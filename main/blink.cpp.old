/* Blink Example

 This example code is in the Public Domain (or CC0 licensed, at your option.)

 Unless required by applicable law or agreed to in writing, this
 software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, either express or implied.
 */

#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "sdkconfig.h"
#include "HardwareSerial.h"
/*
 #include <WiFi.h>
 #include <FS.h>
 #include "SPIFFS.h"
 #include <AsyncTCP.h>
 #include <ESPAsyncWebServer.h>
 #include <SPI.h>
 #include <ArduinoOTA.h>
 #include <esp_int_wdt.h>
 #include <esp_task_wdt.h>

 #include "freertos/FreeRTOS.h"
 #include "esp_log.h"
 #include "freertos/timers.h"

 #include "TaskCore0.h"
 //#include "I2CTask.h"

 #include <Preferences.h>
 #include "nvs_flash.h"

 #include "FDC2212.h"
 */

#define BLINK_GPIO 2

void blink_task(void *pvParameter) {
	/* Configure the IOMUX register for pad BLINK_GPIO (some pads are
	 muxed to GPIO on reset already, but some default to other
	 functions and need to be switched to GPIO. Consult the
	 Technical Reference for a list of pads and their default
	 functions.)
	 */
	gpio_pad_select_gpio(BLINK_GPIO);
	/* Set the GPIO as a push/pull output */
	gpio_set_direction((gpio_num_t) BLINK_GPIO, GPIO_MODE_OUTPUT);
	while (1) {
		/* Blink off (output low) */
		gpio_set_level((gpio_num_t) BLINK_GPIO, 0);
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		/* Blink on (output high) */
		gpio_set_level((gpio_num_t) BLINK_GPIO, 1);
		vTaskDelay(1000 / portTICK_PERIOD_MS);
	}
}

void setup() {
	Serial.println("Setup.");
}

void loop() {
	Serial.println("loop.");
	delay(1000);
}

void app_main() {
	xTaskCreate(&blink_task, "blink_task", configMINIMAL_STACK_SIZE, NULL, 5,
			NULL);
}
